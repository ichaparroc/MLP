#include<cuda_runtime.h>
#include<iostream>
#include<time.h>
#include<math.h>
#include<stdlib.h>
#include<fstream>
#include<omp.h>

#define DBG 0
#define MAXTHREADS 128
using namespace std;

__global__ void train(float *dev_w, float *dev_b, float *dev_d_w, float *dev_d_b, int *n_layers, int *layer,float *input_train,float *output_train,int *accuracy_train,float *error_train, int *n_images_train)
{
	int instance=threadIdx.x+blockIdx.x*blockDim.x;
	if(instance<*n_images_train)
	{

		//continuous space asignation "b"
		int spaces=0;
		float **b = new float*[*n_layers-1];
		for(int i=0;i<*n_layers-1;++i)
			spaces+=layer[i+1];
		spaces=0;
		for(int i=0;i<*n_layers-1;i++)
		{
			b[i]=&dev_b[0]+spaces;
			spaces+=layer[i+1];
		}

		printf("%d ",&dev_w[0]);

		//continuous space asignation "w"
		spaces=0;
		float ***w = new float**[*n_layers-1];
		for(int i=0;i<*n_layers-1;i++)
			spaces+=layer[i];
		w[0] = new float*[spaces];
		for(int i=1;i<*n_layers-1;i++)
			w[i]=w[i-1]+layer[i-1];
		spaces=0;
		for(int i=0;i<*n_layers-1;i++)
			for(int j=0;j<layer[i];j++)
			{
				w[i][j] = &dev_w[0]+spaces;
				spaces+=layer[i+1];
			}

		//continuous space asignation "d_b"
		spaces=0;
		float **d_b = new float*[*n_layers-1];
		for(int i=0;i<*n_layers-1;i++)
			spaces+=layer[i+1];
		spaces=0;
		for(int i=0;i<*n_layers-1;i++)
		{
			d_b[i]=&dev_d_b[0]+spaces;
			spaces+=layer[i+1];
		}

		//continuous space asignation "d_w"
		spaces=0;
		float ***d_w = new float**[*n_layers-1];
		for(int i=0;i<*n_layers-1;i++)
			spaces+=layer[i];
		d_w[0] = new float*[spaces];
		for(int i=1;i<*n_layers-1;i++)
			d_w[i]=d_w[i-1]+layer[i-1];
		spaces=0;
		for(int i=0;i<*n_layers-1;i++)
			for(int j=0;j<layer[i];j++)
			{
				d_w[i][j] = &dev_d_w[0]+spaces;
				spaces+=layer[i+1];
			}

		int real,calculated;
		float max,aux,z;

		printf("%f ",w[0][0][300]);

		//estructure for batch iteration are externalized
		float **local_a = new float*[*n_layers];
		for(int i=1;i<*n_layers;i++)
			local_a[i] = new float[layer[i]];

		//forward propagation with TRAIN DATA
		local_a[0]=&input_train[instance*layer[0]];
		for(int i=0;i<*n_layers-1;++i)
			for(int j=0;j<layer[i+1];++j)
			{
				z=b[i][j];
				for(int k=0;k<layer[i];++k)
					z+=local_a[i][k]*w[i][k][j];
				local_a[i+1][j]=1.0/(1.0+exp(-z));
				//if(DBG) cout<<endl<<"a["<<i+1<<"]["<<j<<"] = "<<local_a[i+1][j];
			}
		//if(DBG){cout<<endl<<"target = "; for(int i=0;i<10;i++) cout<<output_train[instance][i];}

		//calculating accuracy
		for(int i=0;i<10;i++)
			if(output_train[instance*layer[*n_layers-1]+i]==1)
			{
				real=i;
				break;
			}
		max=0;
		for(int i=0;i<10;i++)
			if(local_a[*n_layers-1][i]>max)
			{
				max=local_a[*n_layers-1][i];
				calculated=i;
			}
		if(real==calculated)
			atomicAdd(&accuracy_train[0],1);

		//calculate error_train

		float instance_error=0.0;
		for(int i=0;i<layer[*n_layers-1];i++)
			instance_error+=0.5*pow(output_train[instance*layer[*n_layers-1]+i]-local_a[*n_layers-1][i],2);
		//if(DBG) cout<<endl<<"instance error_train "<<instance<<" = "<<instance_error;
		atomicAdd(&error_train[0],instance_error);


		//backward propagation
		//for the last layer
		int m=*n_layers-2;

		for(int i=0;i<layer[m+1];i++)
		{
			aux=(local_a[m+1][i]-output_train[instance*layer[*n_layers-1]+i])*local_a[m+1][i]*(1-local_a[m+1][i]);
			atomicAdd(&d_b[m][i],aux);
			for(int j=0;j<layer[m];j++)
				atomicAdd(&d_w[m][j][i],aux*local_a[m][j]);
			//if(DBG) cout<<endl<<"d_b["<<m<<"]["<<i<<"] = "<<d_b[m][i];
		}

		//for another layers
		for(int m=*n_layers-3;m>-1;m--)
			for(int i=0;i<layer[m+1];i++)
			{
				z=0.0;
				for(int j=0;j<layer[m+2];j++)
					z+=w[m+1][i][j]*d_b[m+1][j];
				aux=z*local_a[m+1][i]*(1-local_a[m+1][i]);
				atomicAdd(&d_b[m][i],aux);
				for(int j=0;j<layer[m];j++)
					atomicAdd(&d_w[m][j][i],aux*local_a[m][j]);
				//if(DBG) cout<<endl<<"d_b["<<m<<"]["<<i<<"] = "<<d_b[m][i];
			}
	}
}
128
int ReverseInt(int i)
{
	unsigned char ch1, ch2, ch3, ch4;
	ch1=i&255;
	ch2=(i>>8)&255;
	ch3=(i>>16)&255;
	ch4=(i>>24)&255;
	return((int)ch1<<24)+((int)ch2<<16)+((int)ch3<<8)+ch4;
}

int main(int argc,char* argv[])
{

	if(argc==1) cout<<argv[0]<<" n_layers [layers] n_epochs alpha";

	cout.precision(8);

	//internal variables
	int n_images_train;
	int n_images_test;
	float error_train[0],error_test; //instance_error

	//read binary files variable
	int magic_number;
	unsigned char temp;


	cout<<" Artificial Neural Network with n-layers";
	cout<<endl<<"========================================="<<endl<<endl;

	//read args
	int n_layers=strtol(argv[1],NULL,10);
	if(DBG) cout<<endl<<"n_layers = "<<n_layers;

	int *layer = new int[n_layers];
	for(int i=0;i<n_layers;i++)
	{
		layer[i]=strtol(argv[i+2],NULL,10);
		if(DBG) cout<<endl<<"layer["<<i<<"] = "<<layer[i];
	}

	int n_epoch=strtol(argv[n_layers+2],NULL,10);
	if(DBG) cout<<endl<<"n_epoch = "<<n_epoch;

	float alpha=strtod(argv[n_layers+3],NULL);
	if(DBG) cout<<endl<<"alpha = "<<alpha;

	//read MNIST input_train
	float **input_train;

	ifstream file_in_train("../MNIST/train-images.idx3-ubyte",ios::binary);
	if(file_in_train.is_open())
	{
		int n_rows=0;
		int n_cols=0;

		file_in_train.read((char*)&magic_number,sizeof(magic_number));
		magic_number=ReverseInt(magic_number);
		if(DBG) cout<<endl<<"magic_number in input_train = "<<magic_number;

		file_in_train.read((char*)&n_images_train,sizeof(n_images_train));
		n_images_train=ReverseInt(n_images_train);
		if(DBG) cout<<endl<<"n_images_train in input_train = "<<n_images_train;

		//continuous space modification		
		input_train = new float*[n_images_train];		
		input_train[0] = new float[n_images_train*layer[0]];
		for(int i=1;i<n_images_train;++i)
			input_train[i]=input_train[i-1]+layer[0];

		//old space asignation		
		//input_train = new float*[n_images_train];
		//for(int i=0;i<n_images_train;i++)
		//	input_train[i] = new float[layer[0]];

		file_in_train.read((char*)&n_rows,sizeof(n_rows));
		n_rows= ReverseInt(n_rows);
		if(DBG) cout<<endl<<"n_rows in input_train = "<<n_rows;

		file_in_train.read((char*)&n_cols,sizeof(n_cols));
		n_cols= ReverseInt(n_cols);
		if(DBG) cout<<endl<<"n_cols in input_train = "<<n_cols;

		for(int i=0;i<n_images_train;i++)
			for(int r=0;r<n_rows;r++)
				for(int c=0;c<n_cols;c++)
				{
					file_in_train.read((char*)&temp,sizeof(temp));
					input_train[i][(n_rows*r)+c]=(float)temp/255.0;
				}
		file_in_train.close();
		printf("\nSuccess Reading input_train Data");
	}
	else
	{
		cout<<endl<<"Can not read input_train data ... !!!"<<endl;
		throw;
	}

	//read MNIST output_train
	float **output_train;
	ifstream file_out_train("../MNIST/train-labels.idx1-ubyte",ios::binary);
	if (file_out_train.is_open())
	{

		file_out_train.read((char*)&magic_number,sizeof(magic_number));
		magic_number=ReverseInt(magic_number);
		if(DBG) cout<<endl<<"magic_number in output_train = "<<magic_number;

		file_out_train.read((char*)&n_images_train,sizeof(n_images_train));
		n_images_train=ReverseInt(n_images_train);
		if(DBG) cout<<endl<<"n_images_train in output_train = "<<n_images_train;

		//continuous space modification
		output_train = new float*[n_images_train];
		output_train[0] = new float[n_images_train*layer[n_layers-1]];
		for(int i=1;i<n_images_train;++i)
			output_train[i]=output_train[i-1]+layer[n_layers-1];

		//old space asignation
		//output_train = new float*[n_images_train];
		//for(int i=0;i<n_images_train;i++)
		//	output_train[i] = new float[layer[n_layers-1]];

		for(int i=0;i<n_images_train;i++)
			for(int j=0;j<layer[n_layers-1];j++)
				output_train[i][j]=0;

		for(int i=0;i<n_images_train;i++)
		{
			file_out_train.read((char*)&temp,sizeof(temp));
			output_train[i][(int)temp]=1;
		}
		file_out_train.close();
		printf("\nSuccess Reading output_train Data");
	}
	else
	{
		cout<<endl<<"Can not read output_train data ... !!!"<<endl;
		throw;
	}
	//read MNIST input_test
	float **input_test;

	ifstream file_in_test("../MNIST/t10k-images.idx3-ubyte",ios::binary);
	if(file_in_test.is_open())
	{
		int n_rows=0;
		int n_cols=0;

		file_in_test.read((char*)&magic_number,sizeof(magic_number));
		magic_number=ReverseInt(magic_number);
		if(DBG) cout<<endl<<"magic_number in input_test = "<<magic_number;

		file_in_test.read((char*)&n_images_test,sizeof(n_images_test));
		n_images_test=ReverseInt(n_images_test);
		if(DBG) cout<<endl<<"n_images_test in input_test = "<<n_images_test;

		//continuous space modification		
		input_test = new float*[n_images_test];		
		input_test[0] = new float[n_images_test*layer[0]];
		for(int i=1;i<n_images_test;++i)
			input_test[i]=input_test[i-1]+layer[0];

		//old space asignation
		//input_test = new float*[n_images_test];
		//for(int i=0;i<n_images_test;i++)
		//	input_test[i] = new float[layer[0]];

		file_in_test.read((char*)&n_rows,sizeof(n_rows));
		n_rows= ReverseInt(n_rows);
		if(DBG) cout<<endl<<"n_rows in input_test = "<<n_rows;

		file_in_test.read((char*)&n_cols,sizeof(n_cols));
		n_cols= ReverseInt(n_cols);
		if(DBG) cout<<endl<<"n_cols in input_test = "<<n_cols;

		for(int i=0;i<n_images_test;i++)
			for(int r=0;r<n_rows;r++)
				for(int c=0;c<n_cols;c++)
				{
					file_in_test.read((char*)&temp,sizeof(temp));
					input_test[i][(n_rows*r)+c]=(float)temp/255.0;
				}
		file_in_test.close();
		printf("\nSuccess Reading input_test Data");
	}
	else
	{
		cout<<endl<<"Can not read input_test data ... !!!"<<endl;
		throw;
	}

	//read MNIST output_test
	float **output_test;
	ifstream file_out_test("../MNIST/t10k-labels.idx1-ubyte",ios::binary);
	if (file_out_test.is_open())
	{

		file_out_test.read((char*)&magic_number,sizeof(magic_number));
		magic_number=ReverseInt(magic_number);
		if(DBG) cout<<endl<<"magic_number in output_train = "<<magic_number;

		file_out_test.read((char*)&n_images_test,sizeof(n_images_test));
		n_images_test=ReverseInt(n_images_test);
		if(DBG) cout<<endl<<"n_images_test in output_train = "<<n_images_test;

		//continuous space modification		
		output_test = new float*[n_images_test];		
		output_test[0] = new float[n_images_test*layer[n_layers-1]];
		for(int i=1;i<n_images_test;++i)
			output_test[i]=output_test[i-1]+layer[n_layers-1];

		//old space asignation
		//output_test = new float*[n_images_test];
		//for(int i=0;i<n_images_test;i++)
		//	output_test[i] = new float[layer[n_layers-1]];

		for(int i=0;i<n_images_test;i++)
			for(int j=0;j<layer[n_layers-1];j++)
				output_test[i][j]=0;

		for(int i=0;i<n_images_test;i++)
		{
			file_out_test.read((char*)&temp,sizeof(temp));
			output_test[i][(int)temp]=1;
		}
		file_out_test.close();
		printf("\nSuccess Reading output_test Data");
	}
	else
	{
		cout<<endl<<"Can not read output_test data ... !!!"<<endl;
		throw;
	}

//////////////////////////////////////
//n_images_train=1;
//n_images_test=1;
//////////////////////////////////////

	//create structure of data for forward
	//float z;
	int size_of_w;
	int size_of_b;

	//continuous space modification
	int spaces=0;
	float **b = new float*[n_layers-1];
	for(int i=0;i<n_layers-1;i++)
		spaces+=layer[i+1];
	size_of_b=spaces;
	b[0] = new float[spaces];
	for(int i=1;i<n_layers-1;i++)
		b[i]=b[i-1]+layer[i];

	/*old space asignation
	float **b = new float*[n_layers-1];
	for(int i=0;i<n_layers-1;i++)
		b[i] = new float[layer[i+1]];*/

	//continuous space modification
	spaces=0;
	float ***w = new float**[n_layers-1];
	for(int i=0;i<n_layers-1;i++)
		spaces+=layer[i];
	w[0] = new float*[spaces];
	for(int i=1;i<n_layers-1;i++)
		w[i]=w[i-1]+layer[i-1];
	int spaces1=0;
	for(int i=0;i<n_layers-1;i++)
		for(int j=0;j<layer[i];j++)
			spaces1+=layer[i+1];
	size_of_w=spaces1;
	w[0][0] = new float[spaces1];
	spaces=0;
	for(int i=0;i<n_layers-1;i++)
		for(int j=0;j<layer[i];j++)
		{
			w[i][j] = w[0][0]+spaces; //quizas es i+1
			spaces+=layer[i+1];
		}

	/*old space asignation
	float ***w = new float**[n_layers-1];
	for(int i=0;i<n_layers-1;i++)
		w[i] = new float*[layer[i]];
		for(int j=0;j<layer[i];j++)
			w[i][j] = new float[layer[i+1]];*/

	//generating data for weights
	for(int i=0;i<n_layers-1;i++)
		for(int j=0;j<layer[i+1];j++)
		{
			b[i][j]=((float)rand()/(RAND_MAX))/10;
			if(DBG) cout<<endl<<"b["<<i<<"]["<<j<<"] = "<<b[i][j];
		}
	for(int i=0;i<n_layers-1;i++)
		for(int j=0;j<layer[i];j++)
			for(int k=0;k<layer[i+1];k++)
			{
				w[i][j][k]=((float)rand()/(RAND_MAX))/10;
				if(DBG) cout<<endl<<"w["<<i<<"]["<<j<<"]["<<k<<"] = "<<w[i][j][k];
			}

	//create structure of data for backward

	//continuous space modification
	spaces=0;
	float **d_b = new float*[n_layers-1];
	for(int i=0;i<n_layers-1;i++)
		spaces+=layer[i+1];
	d_b[0] = new float[spaces];
	for(int i=1;i<n_layers-1;i++)
		d_b[i]=d_b[i-1]+layer[i];

	/*old space asignation
	float **d_b = new float*[n_layers-1];
	for(int i=0;i<n_layers-1;i++)
		d_b[i] = new float[layer[i+1]];*/

	//continuous space modification
	spaces=0;
	float ***d_w = new float**[n_layers-1];
	for(int i=0;i<n_layers-1;i++)
		spaces+=layer[i];
	d_w[0] = new float*[spaces];
	for(int i=1;i<n_layers-1;i++)
		d_w[i]=d_w[i-1]+layer[i-1];
	spaces1=0;
	for(int i=0;i<n_layers-1;i++)
		for(int j=0;j<layer[i];j++)
			spaces1+=layer[i+1];
	d_w[0][0] = new float[spaces1];
	for(int i=0;i<n_layers-1;i++)
		for(int j=0;j<layer[i];j++)
			if(i!=0 || j!=0)
				d_w[i][j] = d_w[i][j-1]+layer[i+1]; //quizas es i+1

	/*old space asignation
	float ***d_w = new float**[n_layers-1];
	for(int i=0;i<n_layers-1;i++)
	{
		d_w[i] = new float*[layer[i]];
		for(int j=0;j<layer[i];j++)
			d_w[i][j] = new float[layer[i+1]];
	}*/

	//int real,calculated;
	int accuracy_train[1],accuracy_test;
	//float max,aux;

	//structure for batch iteration
	float **local_a = new float*[n_layers-1];
	for(int i=1;i<n_layers;i++)
		local_a[i] = new float[layer[i]];

	//float start_time=omp_get_wtime();


	//CUDA

	cudaError_t err = cudaSuccess;

	//int num_blocks=(n_images_train+MAXTHREADS-1)/MAXTHREADS;
	//(n_images_train+MAXTHREADS-1)/MAXTHREADS
	float *dev_w, *dev_b, *dev_d_w, *dev_d_b, *dev_input_train, *dev_output_train, *dev_error_train;
	int *dev_n_layers, *dev_layer, *dev_accuracy_train, *dev_n_images_train;
	cudaMalloc((void**)&dev_w,size_of_w*sizeof(float));
	cudaMalloc((void**)&dev_b,size_of_b*sizeof(float));

	cudaMalloc((void**)&dev_d_w,size_of_w*sizeof(float));
	cudaMalloc((void**)&dev_d_b,size_of_b*sizeof(float));

	cudaMalloc((void**)&dev_input_train,n_images_train*layer[0]*sizeof(float));
	cudaMalloc((void**)&dev_output_train,n_images_train*layer[n_layers-1]*sizeof(float));

	cudaMalloc((void**)&dev_error_train,sizeof(float));
	cudaMalloc((void**)&dev_accuracy_train,sizeof(int));

	cudaMalloc((void**)&dev_n_layers,sizeof(int));
	cudaMalloc((void**)&dev_layer,n_layers*sizeof(int));

	cudaMalloc((void**)&dev_n_images_train,sizeof(int));

	//////////
	//cudaMemcpy(dev_w,w[0][0][0],size_of_w*sizeof(float),cudaMemcpyHostToDevice);
	//cudaMemcpy(dev_b,b[0][0],size_of_b*sizeof(float),cudaMemcpyHostToDevice);

	//cudaMemcpy(dev_d_w,d_w[0][0][0],size_of_w*sizeof(float),cudaMemcpyHostToDevice);
	//cudaMemcpy(dev_d_b,d_b[0][0],size_of_b*sizeof(float),cudaMemcpyHostToDevice);

	cudaMemcpy(dev_input_train,input_train[0],n_images_train*layer[0]*sizeof(float),cudaMemcpyHostToDevice);
	cudaMemcpy(dev_output_train,output_train[0],n_images_train*layer[n_layers-1]*sizeof(float),cudaMemcpyHostToDevice);

	//cudaMemcpy(dev_error_train,error_train,sizeof(float),cudaMemcpyHostToDevice);
	//cudaMemcpy(dev_accuracy_train,accuracy_train,sizeof(int),cudaMemcpyHostToDevice);

	cudaMemcpy(dev_n_layers,&n_layers,sizeof(int),cudaMemcpyHostToDevice);
	cudaMemcpy(dev_layer,&layer[0],n_layers*sizeof(int),cudaMemcpyHostToDevice);

	cudaMemcpy(dev_n_images_train,&n_images_train,sizeof(int),cudaMemcpyHostToDevice);

	//execution in epochs
	for(int epoch=0;epoch<n_epoch;epoch++)
	{
		error_train[0]=0.0;
		accuracy_train[0]=0;

		//init to 0 all deltas
		for(int i=0;i<n_layers-1;i++)
			for(int j=0;j<layer[i+1];j++)
				d_b[i][j]=0;
		for(int i=0;i<n_layers-1;i++)
			for(int j=0;j<layer[i];j++)
				for(int k=0;k<layer[i+1];k++)
					d_w[i][j][k]=0;

		//CUDA
		cudaMemcpy(dev_error_train,&error_train,sizeof(float),cudaMemcpyHostToDevice);
		cudaMemcpy(dev_accuracy_train,&accuracy_train,sizeof(int),cudaMemcpyHostToDevice);

		cudaMemcpy(dev_d_w,d_w[0][0],size_of_w*sizeof(float),cudaMemcpyHostToDevice);
		cudaMemcpy(dev_d_b,d_b[0],size_of_b*sizeof(float),cudaMemcpyHostToDevice);

		cudaMemcpy(dev_w,w[0][0],size_of_w*sizeof(float),cudaMemcpyHostToDevice);
		cudaMemcpy(dev_b,b[0],size_of_b*sizeof(float),cudaMemcpyHostToDevice);

		train<<< MAXTHREADS , (n_images_train+MAXTHREADS-1)/MAXTHREADS >>>(dev_w,dev_b,dev_d_w,dev_d_b,dev_n_layers,dev_layer,dev_input_train,dev_output_train,dev_accuracy_train,dev_error_train,dev_n_images_train);
		//train<<< 60000 , 1 >>>(dev_w,dev_b,dev_d_w,dev_d_b,dev_n_layers,dev_layer,dev_input_train,dev_output_train,dev_accuracy_train,dev_error_train,dev_n_images_train);

		

		cudaDeviceSynchronize();
		//train<<< 1 , 1 >>>(dev_w,dev_b,dev_d_w,dev_d_b,dev_n_layers,dev_layer,dev_input_train,dev_output_train,dev_accuracy_train,dev_error_train);

		/*for(int instance=0;instance<n_images_train;instance++)
		{
			//estructure for batch iteration are externalized
			//float **local_a = new float*[n_layers-1];
			//for(int i=1;i<n_layers;i++)
			//	local_a[i] = new float[layer[i]];

			//forward propagation with TRAIN DATA
			local_a[0]=input_train[instance];
			for(int i=0;i<n_layers-1;i++)
				for(int j=0;j<layer[i+1];j++)
				{
					z=b[i][j];
					for(int k=0;k<layer[i];k++)
						z+=local_a[i][k]*w[i][k][j];
					local_a[i+1][j]=1.0/(1.0+exp(-z));
					if(DBG) cout<<endl<<"a["<<i+1<<"]["<<j<<"] = "<<local_a[i+1][j];
				}
			if(DBG){cout<<endl<<"target = "; for(int i=0;i<10;i++) cout<<output_train[instance][i];}

			//calculating accuracy
			for(int i=0;i<10;i++)
				if(output_train[instance][i]==1)
				{
					real=i;
					break;
				}
			max=0;
			for(int i=0;i<10;i++)
				if(local_a[n_layers-1][i]>max)
				{
					max=local_a[n_layers-1][i];
					calculated=i;
				}
			if(real==calculated)
				accuracy_train++;

			//calculate error_train

			instance_error=0.0;
			for(int i=0;i<layer[n_layers-1];i++)
				instance_error+=0.5*pow(output_train[instance][i]-local_a[n_layers-1][i],2);
			if(DBG) cout<<endl<<"instance error_train "<<instance<<" = "<<instance_error;
			error_train+=instance_error;

			//backward propagation
			//for the last layer
			int m=n_layers-2;

			for(int i=0;i<layer[m+1];i++)
			{
				aux=(local_a[m+1][i]-output_train[instance][i])*local_a[m+1][i]*(1-local_a[m+1][i]);
				d_b[m][i]+=aux;
				for(int j=0;j<layer[m];j++)
					d_w[m][j][i]+=aux*local_a[m][j];
				if(DBG) cout<<endl<<"d_b["<<m<<"]["<<i<<"] = "<<d_b[m][i];
			}

			//for another layers
			for(int m=n_layers-3;m>-1;m--)
				for(int i=0;i<layer[m+1];i++)
				{
					z=0.0;
					for(int j=0;j<layer[m+2];j++)
						z+=w[m+1][i][j]*d_b[m+1][j];
					aux=z*local_a[m+1][i]*(1-local_a[m+1][i]);
					d_b[m][i]+=aux;
					for(int j=0;j<layer[m];j++)
						d_w[m][j][i]+=aux*local_a[m][j];
					//if(DBG) cout<<endl<<"d_b["<<m<<"]["<<i<<"] = "<<d_b[m][i];
				}
		}*/

		error_test=0.0;
		accuracy_test=0;

		//for every instance in test
		/*for(int instance=0;instance<n_images_test;instance++)
		{

			//structure for batch iterattion are externalized
			//float **local_a = new float*[n_layers-1];
			//for(int i=1;i<n_layers;i++)
			//	local_a[i] = new float[layer[i]];

			//forward propagation with TEST DATA
			local_a[0]=input_test[instance];
			for(int i=0;i<n_layers-1;i++)
				for(int j=0;j<layer[i+1];j++)
				{
					z=b[i][j];
					for(int k=0;k<layer[i];k++)
						z+=local_a[i][k]*w[i][k][j];
					local_a[i+1][j]=1.0/(1.0+exp(-z));
					if(DBG) cout<<endl<<"a["<<i+1<<"]["<<j<<"] = "<<local_a[i+1][j];
				}
			if(DBG){cout<<endl<<"target = "; for(int i=0;i<10;i++) cout<<output_test[instance][i];}

			//calculating accuracy
			for(int i=0;i<10;i++)
				if(output_test[instance][i]==1)
				{
					real=i;
					break;
				}
			max=0;
			for(int i=0;i<10;i++)
				if(local_a[n_layers-1][i]>max)
				{
					max=local_a[n_layers-1][i];
					calculated=i;
				}
			if(real==calculated)
				accuracy_test++;

			//calculate error_test

			instance_error=0.0;
			for(int i=0;i<layer[n_layers-1];i++)
				instance_error+=0.5*pow(output_test[instance][i]-local_a[n_layers-1][i],2);
			if(DBG) cout<<endl<<"instance error_test"<<instance<<" = "<<instance_error;
			error_test+=instance_error;
		}*/

		cudaMemcpy(&error_train[0],dev_error_train,sizeof(float),cudaMemcpyDeviceToHost);
		cudaMemcpy(&accuracy_train,dev_accuracy_train,sizeof(int),cudaMemcpyDeviceToHost);

		cudaMemcpy(&d_w[0][0],dev_d_w,size_of_w*sizeof(float),cudaMemcpyDeviceToHost);
		cudaMemcpy(&d_b[0],dev_d_b,size_of_b*sizeof(float),cudaMemcpyDeviceToHost);

		cout<<"error train"<<error_train[0];

		cout<<endl<<"Error en epoca "<<epoch<<","<<error_train[0]/n_images_train<<","<<error_test/n_images_test<<" ::: "<<(float)accuracy_train[0]/n_images_train<<";"<<(float)accuracy_test/n_images_test;

		//new weight and bias
		for(int m=0;m<n_layers-1;m++)
			for(int j=0;j<layer[m+1];j++)
			{
				b[m][j]-=alpha*d_b[m][j]/n_images_train;
				if(DBG) cout<<endl<<"d_b["<<m<<"]["<<j<<"] = "<<d_b[m][j];
				if(DBG) cout<<endl<<"b["<<m<<"]["<<j<<"] = "<<b[m][j];
				for(int i=0;i<layer[m];i++)
				{
					w[m][i][j]-=alpha*d_w[m][i][j]/n_images_train;
					if(DBG) cout<<endl<<"d_w["<<m<<"]["<<i<<"]["<<j<<"] = "<<d_w[m][i][j];
					if(DBG) cout<<endl<<"w["<<m<<"]["<<i<<"]["<<j<<"] = "<<w[m][i][j];
				}
			}

	}

	printf("Elapsed time with %d threads is %f\n",0,0);

	return 0;
}
